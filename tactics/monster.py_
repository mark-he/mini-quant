import numpy as np
import datetime
from tactics.support.api import *
from tactics.support.objects import *
from tactics.support import indicator
import math

config=Config(name='妖气重重', release=False)
'''
今天涨停，20或30个交易内有至少一个涨停（不是昨天涨停呀），形成双响炮；一阳串四线，30日平均线在60日之上
'''

def init(context):
    print('analysing: ' + context.symbol)
    context.loss_percent = 0.03
    context.win_percent = 0.08
    context.count=120
    subscribe(context, context.symbol, context.count, on_bar)

    return True

def on_bar(context, bars):
    #print(context.now.strftime('%Y-%m-%d'))
    #if context.now.strftime('%Y%m%d') == '20220720':
    #    print('start debugging')
    if len(bars) < context.count:
        return
    if context.share['name'].startswith('ST') or context.share['name'].startswith('*'): #非 ST
        return

    position = get_position(context, context.symbol)
    if len(position) > 0:
        handle_sell(context, bars, position)
    else:
        handle_buy(context, bars)


def finished(context, bars):
    print('analysing finished: ' + context.symbol)
    pass


def handle_buy(context, bars):
    bar = bars.iloc[-1]
    prev_bar = bars.iloc[-2]
    # 判断当前是否涨停
    upper_percent = 0.1
    if bar['symbol'].startswith('3'): #创业板
        upper_percent = 0.2

    suggest = 'None'
    if reach_percent(prev_bar['close'], bar['close'], upper_percent): #涨停
        ma5 = indicator.ma(bars['close'], 5)
        ma10 = indicator.ma(bars['close'], 10)
        ma20 = indicator.ma(bars['close'], 20)
        ma30 = indicator.ma(bars['close'], 30)
        ma60 = indicator.ma(bars['close'], 60)
        ma120 = indicator.ma(bars['close'], 120)

        if bar['low'] <= min([ma5[-1], ma10[-1], ma30[-1], ma20[-1]]) and bar['close'] >= max([ma5[-1], ma10[-1], ma30[-1], ma20[-1]]): # 一阳穿四线
            if ma30[-1] >= ma60[-1] and ma5[-1] > ma10[-1] and ma20[-1] > ma20[-2] and ma60[-1] > ma60[-2] and ma120[-1] > ma120[-2]:
                #20 个交易日前，至少有触及涨停
                trace_count = 25
                reach_count = 0
                while trace_count > 2:
                    prev = bars.iloc[0 - trace_count]
                    next = bars.iloc[1 - trace_count]
                    if reach_percent(prev['close'], next['high'], upper_percent):
                        reach_count += 1
                    trace_count -= 1
                if reach_count > 0:
                    #最高价不能超过最低价的 75%
                    percent = 0.5
                    highlow = np.ptp(bars['high'].values[0 - trace_count : ])
                    if highlow/ bars.iloc[0 - trace_count]['close'] <= percent:
                        suggest = 'Buy'

    if suggest == 'Buy':
        buy(context, context.symbol, bar['close'])
        print('Buy {} on {}'.format(context.share['name'], context.now.strftime('%Y-%m-%d')))


def handle_sell(context, bars, position):
    bar = bars.iloc[-1]
    buy_price = position.iloc[-1]['open']
    price = bar['close']

    suggest = 'None'
    if price < buy_price * (1 - context.loss_percent):
        suggest = 'Sell'
    if price > buy_price * (1 + context.win_percent):
        suggest = 'Sell'

    if suggest == 'Sell':
        sell(context, context.symbol, price)
        print('Sell {} on {}'.format(context.share['name'], context.now.strftime('%Y-%m-%d')))


def reach_percent(prev, next, percent):
    upper_price = prev * (1 + percent)
    upper_price = round(math.floor(upper_price * 100) / 100, 2)  # 排除滑价
    return next >= upper_price


def on_start_run(account):
    print('start=' + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))


def on_stop_run(account):
    print('end=' + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))


if __name__ == '__main__':
    run(
        type = RUN_TYPE_ANALYSIS,
        #symbol='000035',
        #start_date='20220701'
    )